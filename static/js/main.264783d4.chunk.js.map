{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","api/posts.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/users.ts","index.tsx"],"names":["PostsList","posts","handleOpenSidebar","handleSelectedPost","selectedPost","className","map","post","id","body","type","classNames","onClick","selectPostHandler","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","setComments","setCommentErrorMessage","useState","isFormLoading","setIsFormLoading","commentName","setCommentName","commentEmail","setCommentEmail","commentText","setCommentText","name","email","text","formError","setFormError","isEmptyField","length","onSubmit","event","comment","preventDefault","rest","postId","trim","newComment","currentComments","catch","finally","htmlFor","placeholder","value","onChange","target","PostDetails","comments","hasError","setHasError","isLoading","setIsLoading","isCommentButtonClicked","setIsCommentButtonClicked","deleteCommentHandler","commentId","deleteComment","updatedComments","filter","prev","useEffect","getComments","title","href","UserSelector","users","isDropdown","handleDropdown","selectedUser","handleSelectedUser","dropdown","useRef","closeDropdown","e","current","contains","document","addEventListener","removeEventListener","ref","role","user","handleUserSelect","App","setPosts","setSelectedPost","setUsers","setSelectedUser","openSidebar","setOpenSidebar","isDropdownOpen","setIsDropdownOpen","loading","setLoading","isError","setIsError","getPosts","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.264783d4.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  // isSidebarOpen: boolean,\n  handleOpenSidebar:(isSidebarOpen: boolean) => void,\n  selectedPost: Post | null,\n  handleSelectedPost:(post: Post | null) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts, handleOpenSidebar, handleSelectedPost, selectedPost,\n}) => {\n  const selectPostHandler = (post: Post) => {\n    if (post.id !== selectedPost?.id) {\n      handleSelectedPost(post);\n      handleOpenSidebar(true);\n      // handleOpenSidebar(isSidebarOpen);\n    } else {\n      handleSelectedPost(null);\n      handleOpenSidebar(false);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.body}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames('button is-link', {\n                    'is-light': selectedPost !== post,\n                  })}\n                  onClick={() => selectPostHandler(post)}\n                >\n                  {selectedPost === post ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n          {/* <tr data-cy=\"Post\">\n            <td data-cy=\"PostId\">17</td>\n\n            <td data-cy=\"PostTitle\">\n              fugit voluptas sed molestias voluptatem provident\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className=\"button is-link is-light\"\n              >\n                Open\n              </button>\n            </td>\n          </tr>\n\n          <tr data-cy=\"Post\">\n            <td data-cy=\"PostId\">18</td>\n\n            <td data-cy=\"PostTitle\">\n              voluptate et itaque vero tempora molestiae\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className=\"button is-link\"\n              >\n                Close\n              </button>\n            </td>\n          </tr>\n\n          <tr data-cy=\"Post\">\n            <td data-cy=\"PostId\">19</td>\n            <td data-cy=\"PostTitle\">\n              adipisci placeat illum aut reiciendis qui\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className=\"button is-link is-light\"\n              >\n                Open\n              </button>\n            </td>\n          </tr>\n\n          <tr data-cy=\"Post\">\n            <td data-cy=\"PostId\">20</td>\n            <td data-cy=\"PostTitle\">doloribus ad provident suscipit at</td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className=\"button is-link is-light\"\n              >\n                Open\n              </button>\n            </td>\n          </tr> */}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { createComment } from '../api/posts';\n\ntype Props = {\n  selectedPost: Post | null,\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n  setCommentErrorMessage: (value: boolean) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  setComments, selectedPost, setCommentErrorMessage,\n}) => {\n  const [isFormLoading, setIsFormLoading] = useState(false);\n  const [commentName, setCommentName] = useState('');\n  const [commentEmail, setCommentEmail] = useState('');\n  const [commentText, setCommentText] = useState('');\n  const [formError, setFormError] = useState({\n    name: '',\n    email: '',\n    text: '',\n  });\n\n  const isEmptyField = !commentText.length\n    || !commentEmail.length\n    || !commentName.length;\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCommentName(event.target.value);\n    setFormError({\n      ...formError,\n      name: '',\n    });\n  };\n\n  const handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCommentEmail(event.target.value);\n    setFormError({\n      ...formError,\n      email: '',\n    });\n  };\n\n  const handleTextChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setCommentText(event.target.value);\n    setFormError({\n      ...formError,\n      text: '',\n    });\n  };\n\n  const addComment = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (!commentName) {\n      setFormError(rest => ({\n        ...rest,\n        name: 'Name is required',\n      }));\n    }\n\n    if (!commentEmail) {\n      setFormError(rest => ({\n        ...rest,\n        email: 'Email is required',\n      }));\n    }\n\n    if (!commentText) {\n      setFormError(rest => ({\n        ...rest,\n        text: 'Enter some text',\n      }));\n    }\n\n    if (selectedPost?.id && !isEmptyField) {\n      setIsFormLoading(true);\n\n      createComment({\n        postId: selectedPost?.id,\n        name: commentName.trim(),\n        email: commentEmail.trim(),\n        body: commentText.trim(),\n      })\n        .then(newComment => {\n          setComments(currentComments => [...currentComments, newComment]);\n        })\n        .catch(() => {\n          setCommentErrorMessage(true);\n        })\n        .finally(() => {\n          setCommentText('');\n          setIsFormLoading(false);\n        });\n    }\n  };\n\n  const onClear = () => {\n    setFormError({\n      name: '',\n      email: '',\n      text: '',\n    });\n\n    setCommentEmail('');\n    setCommentName('');\n    setCommentText('');\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={addComment}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': formError.name })}\n            value={commentName}\n            onChange={handleNameChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {formError.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {formError.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {formError.name}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': formError.email })}\n            value={commentEmail}\n            onChange={handleEmailChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {formError.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {formError.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {formError.email}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': formError.text })}\n            value={commentText}\n            onChange={handleTextChange}\n          />\n        </div>\n\n        {formError.text && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {formError.text}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isFormLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={onClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (selectedUser: User): Promise<Post[]> => {\n  return client.get<Post[]>(`/posts?userId=${selectedUser.id}`);\n};\n\nexport const getComments = (selectedPost: Post): Promise<Comment[]> => {\n  return client.get<Comment[]>(`/comments?postId=${selectedPost.id}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const createComment = (comment: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', comment);\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { deleteComment, getComments } from '../api/posts';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  selectedPost: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPost }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [hasError, setHasError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isCommentButtonClicked, setIsCommentButtonClicked] = useState(false);\n\n  const deleteCommentHandler = (commentId: number) => {\n    deleteComment(commentId)\n      .then(() => {\n        const updatedComments = comments.filter(prev => prev.id !== commentId);\n\n        setComments(updatedComments);\n      })\n      .catch(() => setHasError(true));\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    setIsCommentButtonClicked(false);\n\n    getComments(selectedPost)\n      .then(setComments)\n      .catch(() => setHasError(true))\n      .finally(() => setIsLoading(false));\n  }, [selectedPost]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost.id}: ${selectedPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {hasError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {(comments.length > 0 && !hasError && !isLoading) ? (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n              {comments.map(comment => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={comment.id}\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => deleteCommentHandler(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          ) : (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!isCommentButtonClicked && !isLoading && !hasError && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsCommentButtonClicked(!isCommentButtonClicked)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {(isCommentButtonClicked && !isLoading) && (\n          <NewCommentForm\n            selectedPost={selectedPost}\n            setComments={setComments}\n            setCommentErrorMessage={setHasError}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useEffect, useRef } from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  isDropdown: boolean,\n  handleDropdown: (isDropdown: boolean) => void,\n  selectedUser: User | null,\n  handleSelectedUser: (selectedUserId: User) => void,\n  // setSelectedPost: (value: Post[]) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users, isDropdown, handleDropdown, selectedUser,\n  handleSelectedUser,\n}) => {\n  const handleUserSelect = (user: User) => {\n    if (user !== selectedUser) {\n      handleDropdown(false);\n      handleSelectedUser(user);\n      // setSelectedPost([]);\n    }\n  };\n\n  const dropdown = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const closeDropdown = (e: MouseEvent) => {\n      if (dropdown.current\n        && isDropdown\n        && !dropdown.current.contains(e.target as Node)) {\n        handleDropdown(false);\n      }\n    };\n\n    document.addEventListener('click', closeDropdown);\n\n    return () => {\n      document.removeEventListener('click', closeDropdown);\n    };\n  }, [isDropdown]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': isDropdown })}\n    >\n      <div className=\"dropdown-trigger\" ref={dropdown}>\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => handleDropdown(!isDropdown)}\n        >\n          {/* <span>Choose a user</span> */}\n          <span>\n            {selectedUser?.name ? selectedUser.name : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              href={`#user-${user.id}`}\n              className=\"dropdown-item\"\n              key={user.id}\n              onClick={() => handleUserSelect(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUsers } from './api/users';\nimport { User } from './types/User';\nimport { getPosts } from './api/posts';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const [openSidebar, setOpenSidebar] = useState(false);\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n\n  const [loading, setLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers)\n      .catch(() => setIsError(true));\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setLoading(true);\n      setTimeout(() => {\n        getPosts(selectedUser)\n          .then(setPosts)\n          .finally(() => setLoading(false));\n      }, 300);\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  isDropdown={isDropdownOpen}\n                  handleDropdown={setIsDropdownOpen}\n                  selectedUser={selectedUser}\n                  handleSelectedUser={setSelectedUser}\n                  // setSelectedPost={setPosts}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {(!selectedUser && !loading) && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {loading && (<Loader />)}\n\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {selectedUser\n                  && !loading\n                  && posts.length === 0\n                  && !isDropdownOpen\n                  && !isError && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {(posts.length > 0 && !isError && !loading && selectedUser)\n                && (\n                  <PostsList\n                    posts={posts}\n                    // isSidebarOpen={openSidebar}\n                    handleOpenSidebar={setOpenSidebar}\n                    selectedPost={selectedPost}\n                    handleSelectedPost={setSelectedPost}\n                  />\n                )}\n\n                {/* <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                  No posts yet\n                </div>\n\n                <PostsList /> */}\n              </div>\n            </div>\n          </div>\n\n          {posts && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                { 'Sidebar--open': openSidebar },\n              )}\n            >\n              {selectedPost && (\n                <div className=\"tile is-child box is-success \">\n                  <PostDetails\n                    selectedPost={selectedPost}\n                  />\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = (): Promise<User[]> => {\n  return client.get<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}